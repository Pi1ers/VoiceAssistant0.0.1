import ctypes
import time
import datetime
from datetime import datetime
import locale
import speech_recognition
from gtts import gTTS
import random
import subprocess
import playsound
import os
import pyautogui
from ctypes import POINTER, cast
from comtypes import CLSCTX_ALL
import pycaw
from pycaw.pycaw import (AudioUtilities,IAudioEndpointVolume,ISimpleAudioVolume)



sr = speech_recognition.Recognizer()
sr.pause_threshold=0.5

list_shutok=['Опытный разработчик всегда посмотрит направо и налево, даже если переходит улицу с односторонним движением.',
'Сколько программистов надо, чтобы вкрутить одну лампочку? – Ни одного. В этом случае отсутствие света – проблема на стороне железа.',
'Что нужно, чтобы всегда писать хороший код? Представляйте себе, что читать и саппортить ваш продукт будет маньяк-убийца, которому кто-то сказал, где вы живете.',
'Зачем нужно плохое ПО? Без него у многих программистов не будет работы.',
'А вы знаете основные достоинства IT-шников? Конечно же, это высокомерие, нетерпимость и невероятная лень.',
'Основные изменения в новой версии программы: исправлены старые баги, добавлены новые.',
'Не работает код? Не нужно переживать! Если все будет работать, то вы можете оказаться безработным.',
'Главная проблема при работе со штатом программистов: никогда не поймешь, чем заняты сотрудники, пока не окажется, что уже наступил дедлайн.',
'Программа получилась плохой, а сроки горят, и заказчик ругается? Не волнуйтесь, смело выпускайте релиз. Просто назовите его версией 1.0.',
'Если вы посмотрите на код, который вы писали более полугода назад, то, скорей всего, вам покажется, что автор – кто-то другой.',
'Программирование похоже на секс: одна ошибка – и всю жизнь придется поддерживать.',
'Написание комментариев в коде чем-то похоже на мытье унитаза – крайне неприятно, совсем не хочется этого делать, но необходимо, чтобы не опозориться перед гостями.',
'Если бы строители работали так же, как программисты кодят, то любая птица, присевшая отдохнуть на крыше дома, могла бы стать причиной гибели цивилизации.',
'Обычно на написание 90% программного кода разработчикам требуется 90% отведенного на проект времени. А дальше случается парадокс: оставшиеся 10% работы требуют … 90 или даже 100% времени.',
'Существует два вида языков программирования: одни – все ругают, другими не пользуются.',
'Особенности разработки любого программного продукта: катастрофически не хватает времени на то, чтобы избавиться от багов, зато времени на то, чтобы сделать их еще больше, всегда хватает.',
'Если когда-нибудь будет создан язык программирования, благодаря которому можно будет кодить на разговорном английском, окажется, что большинство программистов не знают языка.',
'Если в очередном релизе Java будет реализована функция уборки программного мусора, большая часть Java-приложений будут удалять себя сразу после установки.',
'Как пояснить разницу между разными IT-специальностями не специалисту? Инженер («железячник») – он как хирург, посмотрит внутрь организма, исправит проблемы, может даже улучшить что-то. Программист похож на священника и учителя – он заботится о душе и знаниях. А столь привычный всем в офисах сисадмин – это уровень сиделки: «поставит укол», даст «таблетку», поддержит текущее состояние.',
'Пока компьютеры не умеют мыслить самостоятельно, им можно доверять.',
'Разработка ПО по спецификации – это так же просто, как и хождение по воде. Просто заморозьте и одно, и другое.',
'Программирование состоит на 10% из строгой науки, на 20% из смекалки и вдохновения, и на 70% из попыток совместить первое со вторым.',
'Что вы знаете о трудном детстве? Какие там скользкие подоконники? Вот килобайтные игрушки – это и правда страшно.',
'Если вы начинаете сгонять муху с монитора при помощи курсора мыши, пора выключать компьютер.',
'Самый страшный вирус современности – не программный код, он сидит за компьютером и называется пользователь.',
'Бог сумел создать целый мир всего за 6 дней по единственной причине – у него не было предыдущих версий и проблем совместимости.',
'Перед тем, как удалять файлы, убедитесь, что они не ваши.',
'Что самое сложное в дизайне? Удержаться от фич.',
'Отладка – это удаление из программного кода различных багов. Значит, программирование – это создание и добавление этих самых багов в код?',
'Никогда не пишите на пределе своих талантов! Помните: отладка – всегда в два раза сложнее написания кода. И если вы напишете настолько умно, насколько способны, отладить его вы уже не сумеете.',
'На самом деле большинство багов – это фичи, просто не задокументированные.',
'Что общего между программным кодом и церковью? Сначала мы их строим, потом начинаем на них молиться.',
'Если в 9-00 вы видите программиста на рабочем месте, значит, он здесь ночевал.',
'Не помещаются мысли в голове? Воспользуйтесь архиватором!',
'Скажите, IT-шник – это ориентация или все же диагноз?',
'Задумайтесь, какое количество психических сил затрачено программистами на попытки понять фундаментальное различие между программой и алгоритмом!',
'В теории между теорией и практикой нет никакой разницы. На практике происходит иначе.',
'Если вы хотите получать пользу от программирования. никогда не программируйте!',
'Основная цель любой разработки – построить что-то такое, что простоит хотя бы до момента завершения стройки.',
'Финальный релиз программного обеспечения не выйдет до тех пор, пока жив хотя бы один пользователь.',
'Существует всего 2 способа писать код без багов. Но работает почему-то третий.',
'Плохой код – совсем не плохой. Его просто не сумели правильно понять.',
'Если никто не знает ответ на вопрос, пора начать читать документацию.',
'Для IT-шника рабочим столом является монитор, журнальным – системный блок, а клавиатура – обеденным.',
'Об операторе GoTo: даже в высшем обществе бывают ситуации, когда без фразы типа «иди на» обойтись невозможно.',
'Нашел ответ на вопрос по вечному спору – с чего должен начинаться индекс массива – с «0» или «1». Считаю, что мое компромиссное решение – «0,5» — было отвергнуто без надлежащего изучения.',
'Самое главное отличие C от C++: на Си вы можете делать ошибки, а в C++ — еще и наследовать их.',
'Всем знаком этап «бета-тестирования» софта перед официальным релизом. Но мало кто знает, что «бета» с латыни переводится «до сих пор не работает».',
'Современное программное обеспечение напоминает египетские пирамиды. Миллионы блоков как-то стоят друг на друге без какой-то целостности конструкции, но с помощью каторжного труда тысяч рабов.',
'Современное программирование похоже на бег наперегонки со Вселенной: программисты стараются сделать код, рассчитанный на любого идиота, Вселенная плодит новые разновидности идиотов. Пока что Вселенная побеждает всухую.',]


def shutki():
    abs = random.randrange(len(list_shutok))  # текст со списком слов+рандом на его*   ++++++++++
    sss = list_shutok[abs]
    say(sss)


list_anekdot=['— Доктор, от чего умер ваш пациент? — От старости. — Но ведь он попал под Камаз... — Был бы моложе — успел бы отбежать',
              'Из области техники: — Что такое танк, товарищи бойцы? — Танк — это возбужденный трактор, товарищ полковник!!!',
              'В салоне красоты: — Я просила вас выщипать мне брови, чтобы взгляд был слегка удивленный, а не ох[рен]евший!']


def anekdot():
    a = random.randrange(len(list_anekdot))  # текст со списком слов+рандом на его*   ++++++++++ изменить на шадание
    aa = list_anekdot[a]
    say(aa)


prediction_text = ['Некоторые вещи слишком тяжелы, чтобы тянуть их за собой…',
            'Перемены приходят с принятием будущего, а не в борьбе с прошлым…',
            'Чтобы тебя нашли, перестань прятаться…',
            'Все, что тебе нужно — это любовь. Впусти ее в свой мир и сердце.',
            'Понять что влюблен просто: ты не можешь уснуть, потому что реальность прекраснее любых снов.',
            'Оглянитесь назад, чтобы понять, в какой момент свернули не в ту сторону.',
            'Ошибки не совершает только тот, кто не пробует.',
            'Вскоре к вам явится кто-то неожиданный.',
            'Возраст — главная цена за зрелость.',
            'Все люди кажутся нормальными, пока вы не узнаете их поближе.',
            'Опыт — это то, что остается, когда все остальное уходит…',
            'Вывод — этот момент, в котором ты понял, что устал думать…',
            'Циник — это разочарованный оптимист.',
            'Хотите быстро найти потерянную вещь? Купите новую.',
            'Все взрослые маскируются под ответственных людей.',
            'Человек не боится ничего сильнее собственного страха.',
            'Искушение — это не возможно. Не путайте!',
            'Нет большей ошибки, чем быть всегда правым…',
            'Чтобы вкусить плод, нужно взобраться на дерево.',
            'Не позволяйте лести заходить слишком далеко…',
            'Глупость — самый большой враг человека.',
            'Даже в пятницу на работе можно найти счастье…',
            'Действия говорят громче, чем печенье с предсказаниями',
            'Никогда не забывай друга. Особенно если он твой должник.',
            'Ни одна снежинка не чувствует себя виновной в снегопаде.',
            'Не ждите чудес, чудите сами',
            'Жизнь слишком коротка, чтобы ждать счастья. Сотворите его!',
            'Если сегодня сделать небольшой шаг навстречу мечте, пусть станет короче.',
            'Не откладывай на завтра то, что не планируешь делать никогда.',
            'То, что отнимает менее 5-ти минут, делай сразу!',
            'Только ты можешь хвалить и ругать себя.',
            'Не доверяй никому свою жизнь. Неси ответственность за нее самостоятельно.',
            'Перекладывание ответственности на кого-то еще никого не спасло.',
            'Спасение утопающего — дело рук самого утопающего….',
            'Красота спасет мир, если исчезнут алчность и зависть.',
            'Не отказывай себе в удовольствии…',
            'Живи полной жизнью, она не такая длинная, как тебе кажется…',
            'Сделай сегодня то, что не решался совершить долгое время.',
            'Рискни! Судьба улыбается отчаянным…',
            'Счастье есть! Но это не точно…',
            'За этим состоянием скрывается любовь всей твоей жизни…',
            'Спеши любить, не отказывайся от того, кто всегда рядом…',
            'Старая любовь скоро тебя настигнет.',
            'Личная жизнь скоро станет счастливой и гармоничной.',
            'Любовь всей вашей жизни находится прямо перед глазами. Откройте их шире.',
            'Вы точно узнаете друг друга, когда встретитесь, а это произойдет совсем скоро.',
            'Следуйте за сердцем и посмотрите, что из этого получится…',
            'Сейчас самое время вступить на неизведанную территорию.',
            'Середина процесса — не лучшее время, чтобы опускать руки. Боритесь за свое счастье до конца!',
            'Продолжайте делать то, что любите. Остальное жизнь расставит по своим местам.',
            'Не отказывайте себе в том, что дарит вам улыбку.',
            'Один человек дарит вам положительных эмоций больше, чем все остальные жители мира.',
            'Тот, о ком вы думаете каждый день перед сном, давно заметил вас.',
            'Следует быть смелее не только в мыслях, но и в действиях.',
            'Жизнь дана человеку для того, чтобы любить, а вы ограничиваете это чувство.',
            'Не бойтесь своих желаний, они взаимны…',
            'Настройте себя на то, чтобы испытать настоящую любовь.',
            'Где-то между всей этой суетой, спрятана лучшая версия вас.',
            'Избавьтесь от того, что тяготит сознание и обретите желанную легкость…',
            'Для пылающего сердца нет ничего невозможного']

def predskazanya():
    a = random.randrange(len(prediction_text))             #текст со списком слов+рандом на его*   ++++++++++ изменить на шадание
    aa=prediction_text[a]
    say(aa)


commands_dict={
    'commands':{
        #открытие программ
        'open_spotyfy':['включи spotufy','включи spotify','включи спотифай','открой спотифай'],
        #команды мультимедия
        'play':['пауза', 'включи музыку'],
        'nexttrack':['дальше', 'следующая мелодия'],
        'prevtrack':['назад', 'прошлая мелодия'],
        'volumup':['громче'],
        'volumdown':['тише','тиша', 'уменьши громкость'],
        'volume_on':['включи звук'],
        'volume_off':['выключи звук','убери звук','беззвучный режим'],
        'volume_na':['верни звук'],
        #команды приветствия
        'greeting':['привет','приветствую'],
        'create_task':['добавить задачу','создать задачу','заметка'],
        'delete_task':['удалить задачу', 'удаление заметки'],
        'stop':['стоп','пока'],
        #предсказания и шутки
        'predskazanya':['погадай мне','гадание'],
        'shutki':['шутка про IT', 'шутка про айтишников', 'анекдот про айтишников','шутка про айти','шутка про айти'],
        'anekdot':['расскажи анекдот','расскажи шутку','анекдот'],
        #узнать что то(мелкое)
        'what_time':['сколько время','который час','какое сейчас время'],
        'what_date':['какой сегодня день','какое число']

    }
}

def listen_command():
    #tфункция вернет распознанную команду
    try:
        with speech_recognition.Microphone() as mic:
            sr.adjust_for_ambient_noise(source=mic, duration=0.2)
            audio = sr.listen(source=mic)
            query = sr.recognize_google(audio_data=audio, language='ru-Ru').lower()
            print(f"ты сказал {query}")
            return query
    except speech_recognition.UnknownValueError:
        return "Damn... не понял что ты сказал"


def what_time():
    now = datetime.datetime.now()
    say(f"Текущее время:, {now.time().strftime('%H:%M:%S')}")


def what_date():
    locale.setlocale(locale.LC_ALL, 'ru_RU.utf8')
    nowe = datetime.now()
    a = nowe.strftime('сегодня %A, %d-го %B %Y-го  ',)
    say(a)


def open_spotyfy():
    os.startfile(r'"C:\Users\Pi1ners\AppData\Roaming\Spotify\Spotify.exe"')


def play():
    return pyautogui.press('playpause')  # пауза / play


def nexttrack():
    return pyautogui.press('nexttrack')  # следующий трек


def prevtrack():
    return pyautogui.press('prevtrack')  # прошлый трек


def volumup():
    return pyautogui.press('volumeup')  # звук громче


def volumdown():
    return pyautogui.press('volumedown')  # звук тише


def volume_on():                #включение звука на громкость которая была перед его выключением
    say('выполнено')
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMute(0, None)


def volume_off():               # громкость на 0.....если вернуть будет
    say("готово")
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMute(1, None)


def volume_na():
    say('выстовляю')
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(pycaw.pycaw.IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = interface.QueryInterface(pycaw.pycaw.IAudioEndpointVolume)

    # Устанавливаем громкость на 50%
    volume.SetMasterVolumeLevel(-50.0, None)



def say(text):              # воспроизведение голоса
    voice = gTTS(text, lang='ru')
    unique_file = 'audio_' + str(random.randint(0, 10000)) + '.mp3'
    voice.save(unique_file)
    playsound.playsound(unique_file)
    os.remove(unique_file)

    print(f'Ассистент: {text}')


def greeting():
    #приветствие
    return say("привет нищеброд")


def create_task():
    #добавление заметок
    say("что добавим в список дел?")

    query = listen_command()

    with open('todo-list.txt', 'a') as file:
        file.write(f"{query}\n")
    return say(f'задача {query} добавлени в список todo-list')



def delete_task():   ###################   ПРОРАБОАТЬ
    say("что будем удалять?")
    query = listen_command()

    with open('todo-list.txt', 'r+') as file:
        lines = file.readlines()
        print(lines)
        if query == lines:
            lines.remove(f'{query}\n')
        else:
            return say(f'задачи {query} в файле не найдено')


def main():
    while True:
        query = listen_command()

        for k, v in  commands_dict['commands'].items():
            if query in v:
                print(globals()[k]())


def stop():
    say('до скорого')
    exit()




if __name__ in "__main__":
    main()



